/*******************************************************************************
 * Copyright (c) 2013 Apria Healthcare                                          *
 * As an unpublished work. All Rights Reserved.                                 *
 * This media contains an authorized copy or copies of material copyrighted by  *
 * Apria Healthcare and is the unpublished, confidential property of            *
 * Apria Healthcare. You may not disclose, copy or use any portion of           *
 * these materials for any purpose without the express written consent of Apria *
 * Healthcare.  You must reproduce this copyright notice and any other          *
 * copyright notices included in machine-readable copies on all authorized      *
 * copies.                                                                      *
 *******************************************************************************/

package com.apria.web.services.ecm.wsclient;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.MessageFormat;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.apria.framework.common.exception.ApplicationException;
import com.apria.framework.common.exception.ServiceException;
import com.apria.framework.common.exception.handler.ExceptionHandler;
import com.apria.framework.common.util.logging.ApriaLogger;
import com.apria.web.services.ecm.util.ExceptionCodes;
import com.ibm.mm.webservices.was60.CMBGenericWebService;
import com.ibm.mm.webservices.was60.CMBGenericWebServiceService;
import com.ibm.mm.webservices.was60.CMBGenericWebServiceServiceLocator;

/**
 * Sample program illustrating CRUD and doc routing operations using the DB2
 * Content Manager Generic WebService 8.4 running on IBM WebSphere Application
 * Server 6.1.
 */
public class GenericWebServiceHelperBase {
	protected static CMBGenericWebService cmbservice = null;

	private static DocumentBuilderFactory factory = null;
	private static ApriaLogger logger = ApriaLogger
		.getLogger(GenericWebServiceHelperBase.class);
	private static final String REQUEST_STATUS_TAG = "RequestStatus";

	/**
	 * Method for creating the XML string representing the authentication
	 * information needed by the request commands.
	 * 
	 * @param dstype specifies the datasource type
	 * @param server specifies the Content Manager server name that the web
	 *        service should use
	 * @param username is the Content Manager username to use to log in to
	 *        Content Manager
	 * @param password is the Content Manager password to use to log in to
	 *        Content Manager
	 */
	protected static String createAuthenticationDataXML(String dstype,
		String server, String username, String password) {

		// uses the message template to format the XML string for specifying the
		// authentication data
		return MessageFormat.format(
			MessageTemplate.AUTHENTICATION_DATA_TEMPLATE, new Object[] {
				dstype, server, username, password });

	}

	/**
	 * Method for creating an object which represents the Generic Web Service.
	 * The method using The method uses the proxy classes generated by IBM
	 * WebSphere's WSDL2Java command.
	 * 
	 * @param websvcURL the URL pointing to generic web services server
	 * 
	 * @return whether the web service was created successfully or not
	 */
	protected static void createGenericWebService(String websvcURL)
		throws com.apria.framework.common.exception.ServiceException {
		// This is a utility class created by WSDL2Java to return a web service
		// object which
		// will generate the appropriate soap request messages to the web
		// service and receive soap message back

		// Get an instantiation of the web service object
		try {
			CMBGenericWebServiceService cs = new CMBGenericWebServiceServiceLocator();
			logger.debug("websvcURL=" + websvcURL);
			if (websvcURL != null && websvcURL.length() > 0) {
				cmbservice = cs.getCMBGenericWebService(new URL(websvcURL));
			} else {
				cmbservice = cs.getCMBGenericWebService();
			}
		} catch (MalformedURLException me) {
			logger.error("The URL to web services server is not correct.");
			ServiceException ase = new ServiceException(
				ExceptionCodes.CM_WEBSERVICE_CREATION,
				new Object[] { websvcURL }, me);
			ExceptionHandler.handleException(ase, logger);
			throw ase;
		} catch (javax.xml.rpc.ServiceException se) {
			logger.error("Creation of the Generic Web Service object failed");
			ServiceException ase = new ServiceException(
				ExceptionCodes.CM_WEBSERVICE_CREATION,
				new Object[] { websvcURL }, se);
			ExceptionHandler.handleException(ase, logger);
			throw ase;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	protected String workingDir = null;

	private DocumentBuilder builder = null;

	/**
	 * Method for creating a DOM document out of the XML string.
	 * 
	 * @param replyXML is the string representation of the XML
	 * 
	 * @return the XML document associated with the string
	 */
	protected Document getDocument(String replyXML) {
		logger.entry("getDocument");
		Document document = null;
		if (replyXML == null) {
			logger
				.error("The response of the web service contains no xml reply message");
			return document;
		}
		try {
			document = builder
				.parse(new InputSource(new StringReader(replyXML)));
			logger.debug("got the document");

		} catch (SAXException e) {
			ApplicationException ae = new ApplicationException(
				ExceptionCodes.CM_XML_DOM_FAILURE, e);
			ExceptionHandler.handleException(ae, logger);
		} catch (IOException ioe) {
			ApplicationException ae = new ApplicationException(
				ExceptionCodes.CM_XML_DOM_FAILURE, ioe);
			ExceptionHandler.handleException(ae, logger);
		}
		logger.exit("getDocument");
		return document;
	}

	/**
	 * Get the path of the working directory.
	 * 
	 * @return
	 */
	protected String getWorkingDir() {
		if (workingDir != null && workingDir.length() > 0)
			return workingDir + File.separator;
		else
			return "";
	}

	/**
	 * Method for initializing the document builder class which will be used to
	 * parse the XML commands into DOM objects.
	 * 
	 * @return whether it was successful or not to initialize the document build
	 */
	protected void initializeDocumentBuilder() throws ApplicationException {

		if (factory == null) {
			factory = DocumentBuilderFactory.newInstance();
		}

		try {
			builder = factory.newDocumentBuilder();
		} catch (ParserConfigurationException pce) {
			logger.error("Creation of Documentbuilder instance failed.");
			ApplicationException ae = new ApplicationException(
				ExceptionCodes.CM_XML_DOM_FAILURE, pce);
			ExceptionHandler.handleException(ae, logger);
			throw ae;
		}
	}

	/**
	 * Method for parsing the XML document for the RequestStatus tag and
	 * checking for the status of the request.
	 * 
	 * @param document which is an XML document
	 * 
	 * @return whether the status is successful or not
	 */
	protected boolean parseRequestStatus(Document document) {
		if (document == null) {
			logger.error("Document is null.");
			return false;
		}
		NodeList nodes = document.getElementsByTagName(REQUEST_STATUS_TAG);
		if (nodes.getLength() == 0) {
			logger.error("No request status returned");
			return false;
		}

		// check for the success attribute to see if it's true or false

		Element statusNode = (Element) nodes.item(0);
		String successAttribute = statusNode.getAttribute("success");

		logger.debug("Status " + successAttribute);

		if (successAttribute != null) {
			if (successAttribute.compareTo("true") == 0) {
				return true;
			} else {
				logger.error("Operation was not successful");

				// evaluate the ErrorData tag to print the error messages
				NodeList errors = document.getElementsByTagName("ErrorData");
				for (int j = 0; j < errors.getLength(); j++) {
					Element error = (Element) errors.item(j);
					String errorMessage = error.getAttribute("errorMessage");
					if (errorMessage != null) {
						logger.error(" Error Message is: " + errorMessage);
					}
				}
				return false;
			}
		}

		return false;
	}

	protected String removeAuthDtls(String reqXml) {
		String retStr = "";
		if (reqXml.indexOf("<AuthenticationData ") > 0) {
			String str1 = reqXml.substring(0,
				reqXml.indexOf("<AuthenticationData "));
			String str2 = reqXml.substring(
				(reqXml.indexOf("</AuthenticationData>")), reqXml.length());
			retStr = str1 + str2.replace("</AuthenticationData>", " ");
		}

		return retStr;

	}

	/*
	 * This fix has been added for this OPAS request R2:000008343506
	 */

	/**
	 * Set the path of the working directory.
	 * 
	 * @param workingDir the absolute path of the working directory
	 */
	protected void setWorkingDir(String workingDir) {
		this.workingDir = workingDir;
	}
}
